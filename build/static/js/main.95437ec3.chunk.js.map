{"version":3,"sources":["components/CheckBox/CheckBox.tsx","components/Gradient/ColorPicker.tsx","components/Gradient/Gradient.tsx","components/Gradient/GradientProvider.tsx","components/NameInput/NameInput.tsx","components/OutputBox/OutputBox.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CheckBox","checked","checkBoxName","setChecked","className","type","onChange","e","target","ColorPicker","color","setColor","style","margin","disableAlpha","event","hex","Gradient","colorGradient","setColours","useState","ColourPickerColor","setColour","colourPicker","GradientProvider","IsChecked","colorCodes","Amount","setAmount","ColourGradientColour","ColourGradientColour2","setColour2","ColourGradientColour3","setColour3","ColourGradientColour4","setColour4","ColourGradientColour5","setColour5","ColourGradientColour6","setColour6","colourPickers","push","position","shape","size","icon","PlusOutlined","onClick","MinusOutlined","display","flexDirection","flexWrap","NameInput","name","setName","TextArea","width","height","fontSize","backgroundColor","borderColor","placeholder","value","res","OutputBox","nameSize","gradientSize","coloured","colours","underlined","amount","bold","italicized","strikethrough","newName","code","length","Math","ceil","colorVal","power","i","j","disabled","CopyOutlined","marginLeft","navigator","clipboard","writeText","App","setColoured","setUnderlined","setBold","setItalicized","setStrikethrough","colour","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95437ec3.chunk.js","sourcesContent":["import React from 'react'\n\ninterface CheckBoxProps {\n    checked: boolean,\n    checkBoxName: string,\n    setChecked: React.Dispatch<React.SetStateAction<boolean>>,\n}\n\nexport const CheckBox: React.FC<CheckBoxProps> = ({checked,checkBoxName,setChecked}) => {\n    \n    \n    return (\n        <>\n            <input className=\"checkBox\" type=\"checkbox\" checked={checked} onChange={(e)=>{\n\n                setChecked(e.target.checked);\n            }}/>\n            {checkBoxName}\n        </>\n    );\n}","import React from 'react'\nimport {ChromePicker} from 'react-color'\ninterface ColorPickerProps {\n    color: string,\n    setColor: React.Dispatch<React.SetStateAction<string>>,\n}\n\nexport const ColorPicker: React.FC<ColorPickerProps> = ({color, setColor}) => {\n\n    return (\n        <>\n            <div style={{margin:4}}>\n                <ChromePicker disableAlpha color={color} onChange={((color, event) => {\n                    setColor(color.hex);\n                })} />\n            </div>\n        </>\n    );\n}","import React, { useState } from 'react'\nimport {ColorPicker} from \"./ColorPicker\";\ninterface GradientProps {\n    colorGradient:string,\n    setColours: React.Dispatch<React.SetStateAction<string>>,\n}\n\nexport const Gradient: React.FC<GradientProps> = ({colorGradient, setColours}) => {\n    let [ColourPickerColor, setColour] = useState(\"\");\n           \n    const colourPicker: JSX.Element = <ColorPicker color={ColourPickerColor} setColor={setColour}/>\n        \n    colorGradient = ColourPickerColor;\n    setColours(colorGradient);\n    return (\n        <>\n            {colourPicker}\n        </>\n    );\n    \n}","import { PlusOutlined, MinusOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport React, { useState } from 'react'\nimport {Gradient} from \"./Gradient\";\ninterface GradientProviderProps {\n    IsChecked: boolean,\n    colorCodes:string[],\n    setColours: React.Dispatch<React.SetStateAction<string[]>>,\n    Amount:number,\n    setAmount: React.Dispatch<React.SetStateAction<number>>,\n}\n\nexport const GradientProvider: React.FC<GradientProviderProps> = ({IsChecked, colorCodes, setColours, Amount, setAmount}) => {\n\n    let [ColourGradientColour, setColour] = useState(\"\");\n    let [ColourGradientColour2, setColour2] = useState(\"\");\n    let [ColourGradientColour3, setColour3] = useState(\"\");\n    let [ColourGradientColour4, setColour4] = useState(\"\");\n    let [ColourGradientColour5, setColour5] = useState(\"\");\n    let [ColourGradientColour6, setColour6] = useState(\"\");\n    \n    const colourPickers: JSX.Element[] = [];\n\n    colourPickers.push(\n        <Gradient colorGradient={ColourGradientColour} setColours={setColour}/>\n    );\n    colourPickers.push(\n        <Gradient colorGradient={ColourGradientColour2} setColours={setColour2}/>\n    );\n    colourPickers.push(\n        <Gradient colorGradient={ColourGradientColour3} setColours={setColour3}/>\n    );\n    colourPickers.push(\n        <Gradient colorGradient={ColourGradientColour4} setColours={setColour4}/>\n    );\n    colourPickers.push(\n        <Gradient colorGradient={ColourGradientColour5} setColours={setColour5}/>\n    );\n    colourPickers.push(\n        <Gradient colorGradient={ColourGradientColour6} setColours={setColour6}/>\n    );\n    colorCodes[0] = ColourGradientColour;\n    colorCodes[1] = ColourGradientColour2;\n    colorCodes[2] = ColourGradientColour3;\n    colorCodes[3] = ColourGradientColour4;\n    colorCodes[4] = ColourGradientColour5;\n    colorCodes[5] = ColourGradientColour6;\n    \n    setColours(colorCodes);\n    setAmount(Amount);\n\n    if(IsChecked){\n        return (\n            <>\n            <div style={{position:'relative', margin:8}}>\n                <Button \n                    type=\"primary\" \n                    shape=\"circle\" \n                    size=\"large\"\n                    icon={<PlusOutlined />}\n                    style={{position:'relative',margin:4}}\n                    onClick={(e) => {\n                        if(Amount<6){\n                            setAmount(Amount+1);\n                        }\n                    }}\n                            \n                />\n                <Button \n                    type=\"primary\" \n                    shape=\"circle\" \n                    size=\"large\"\n                    icon={<MinusOutlined />}\n                    style={{position:'relative',margin:4}}\n                    onClick={(e) => {\n                        if(Amount>0){\n                            setAmount(Amount-1);\n                        }\n                    }} \n                />\n                <p style={{margin:4}}>Active Colours {Amount}</p>\n                <div style={{display:\"flex\",flexDirection:\"row\",flexWrap:\"wrap\"}}>\n                    \n                    {colourPickers}\n        \n                </div>\n            </div>\n            </>\n        );\n    }\n    return(\n        <>\n            \n        </>\n    );\n}\n","import { Input } from 'antd';\nimport React from 'react'\n\ninterface NameInputProps {\n    name:string,\n    setName: any,\n}\n\nexport const NameInput: React.FC<NameInputProps> = ({name, setName}) => {\n    return (\n        <>\n            <div style={{margin:8}}>\n                <Input.TextArea style={{ width:250, height:30, fontSize:\"25px\",backgroundColor:\"#E8E7E7\",borderColor:\"#E8E7E7\"}} placeholder=\"Nickname\" value={name} onChange={(e) => {\n                    setName(e.target.value);\n                }}/>\n           </div>\n        </>\n    );\n}","import { Input, Button } from 'antd';\nimport { CopyOutlined } from '@ant-design/icons';\nimport React from 'react'\ninterface OutputBoxProps {\n    colours:string[],\n    name:string,\n    coloured: boolean,\n    underlined: boolean,\n    amount: number,\n    bold: boolean,\n    italicized: boolean,\n    strikethrough: boolean,\n}\n\nlet setGradientResolution: (nameSize: number, gradientSize: number) => number = function(\n    nameSize: number, \n    gradientSize: number\n): number {\n\tif (nameSize > gradientSize) {\n\t\treturn Math.ceil(nameSize / gradientSize);\n\n\t}\n\telse {\n\t\treturn 1;\n\t\t\t\n\t}\n}\nlet res = 0;\nexport const OutputBox: React.FC<OutputBoxProps> = ({coloured, colours, name, underlined, amount, bold, italicized, strikethrough}) => {\n    \n    let newName:string = \"\";\n    let code:string =\"\";\n\n    if(name === \"\"){\n        newName = \"\";\n    }\n\n    if(underlined){\n        code += \"&n\";\n    }\n    if(bold){\n        code += \"&l\";\n    }\n    if(italicized){\n        code += \"&o\";\n    }\n    if(strikethrough){\n        code += \"&m\";\n    }\n\n    res = setGradientResolution(name.length,amount);\n    let colorVal = 0;\n\tlet power = 0;\n    if(coloured){\n\n        newName = \"&\" + colours[colorVal] + code;\n        for(var i = 1; i < name.length - power + 1; ++i){\n            \n\t\t    newName = newName + name[i-1+power];\n\n            if(i/res === 1 && (power + i) !== name.length){\n                colorVal++;\n                \n                newName= newName + \"&\" + colours[colorVal] + code;\n                \n                power = power + i;\n\n                i = 0;\n            }\n        }\n    }\n    else{\n        for(var j = 0; j < name.length; j++){\n            \n            newName += code;\n\n            newName += name[j];\n        }\n    }\n    return (\n        <>\n            <div style={{ margin: 8 }}>\n                <Input.TextArea\n                    value={newName}\n                    disabled\n                    style={{width:400, height:100, fontSize:\"25px\",backgroundColor:\"#1A1919\",borderColor:\"#1A1919\",color:\"#FFFFFF\"}}\n                     \n                />\n                <Button \n                    type=\"primary\" \n                    shape=\"circle\" \n                    icon={<CopyOutlined />} \n                    size=\"large\"\n                    style={{position:'absolute', marginLeft:8}}\n                    onClick={(e) => { navigator.clipboard.writeText(\"/nick \" + newName)}}\n                    \n                />\n            </div>\n        </>\n    );\n}","import React, { useState } from 'react';\nimport { CheckBox } from './components/CheckBox/CheckBox';\nimport { GradientProvider } from './components/Gradient/GradientProvider';\nimport { NameInput } from './components/NameInput/NameInput';\nimport { OutputBox } from './components/OutputBox/OutputBox';\n\nfunction App() {\n\n  let [coloured, setColoured] = useState(false)\n  let [underlined, setUnderlined] = useState(false)\n  let [bold, setBold] = useState(false)\n  let [italicized, setItalicized] = useState(false)\n  let [strikethrough, setStrikethrough] = useState(false)\n  let [name, setName] = useState(\"\");\n\n  let [colour, setColour] = useState([\"\"])\n  let [Amount, setAmount] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <header>\n\n        <h1 style={{}}>Minecraft Hex Nick name generator</h1>\n\n        <div>\n          <NameInput name={name} setName={setName} />\n        </div>\n\n\n        <div>\n          <CheckBox \n          checkBoxName=\"Colours\" \n          checked={coloured} \n          setChecked={setColoured}\n          />\n\n          <CheckBox \n          checkBoxName=\"Underline\" \n          checked={underlined} \n          setChecked={setUnderlined}\n          />\n\n          <CheckBox \n          checkBoxName=\"Bold\" \n          checked={bold} \n          setChecked={setBold}\n          />\n\n          <CheckBox \n          checkBoxName=\"Italics\" \n          checked={italicized} \n          setChecked={setItalicized}\n          />\n\n          <CheckBox \n          checkBoxName=\"Strikethrough\"\n           checked={strikethrough} \n           setChecked={setStrikethrough}\n           />\n        </div>\n\n        <div style={{display:'flex',flexDirection:'row'}}>\n          <GradientProvider IsChecked={coloured} colorCodes={colour} setColours={setColour} Amount={Amount} setAmount={setAmount}/>\n        </div>\n\n\n        <div>\n          <OutputBox \n          coloured={coloured}\n          colours={colour}\n          name={name}\n          amount={Amount}\n          underlined={underlined}\n          bold={bold}\n          italicized={italicized}\n          strikethrough={strikethrough}/>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n //\nReactDOM.render(\n  <div>\n    <body>\n      <App />\n    </body>\n  </div>,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}